#parse and format
f = open('dictionary.lst')
contents = f.read()
contents = contents.lower()
content_list = contents.split()
inputString = input().lower()
ciphertext = inputString.split()

longest = 0  
for i in ciphertext:
    if len(i) > longest:
        longest = len(i)
        longestWord = i

#detect isomoprh
def isIsomorphic(str1, str2):
    len1 = len(str1)
    len2 = len(str2)
    if len1 != len2:
        return(False)
    dict1 = {k:[False] for k in set(list(str1))}
    dict2 = {}
    for i in range(len(str1)):
        if dict1[str1[i]] == [False]:
            if str2[i] in list(dict2):
                return(False)
            else:
                dict1[str1[i]] = str2[i]
                dict2[str2[i]] = str1[i]
        elif dict1[str1[i]] != str2[i]:
            return(False)
    return(True)

#generate masterkey
def decipher(cipherword, crib, ctext=ciphertext, wordList=content_list, length=longest):
    key = dict(zip(list(cipherword),list(crib)))
    tempKey = dict(zip(list(cipherword),list(crib)))
    n=longest
    while n > 1 and len(list(key)) < 26:
        for cipherword in ctext:
            if len(cipherword) == n:
                for word in wordList:
                    if isIsomorphic(cipherword,word) is True:
                        count=0
                        for numletter in range(len(cipherword)):
                            if cipherword[numletter] in list(key):
                                    
                                    #get rid of the false poitive isomorphs
                                if key[cipherword[numletter]] != word[numletter]:
                                    break
                                else:
                                        count = count+1
                        if count > 1:
                            for numletter in range(len(cipherword)):
                                if cipherword[numletter] not in list(key):
                                    key[cipherword[numletter]]=word[numletter]
        n=n-1
    return(key)

#match longest ismorph to match seed, use seed to generate full key off matches
for i in content_list:
    if len(i) == longest:
        if isIsomorphic(i, longestWord) is True:   
            masterkey = decipher(longestWord,i)
            plaintext = ''
masterkey[" "]=" "

#use key to decipher full plaintext from ciphertext
for letter in inputString:
    plaintext=plaintext+str(masterkey[letter])
print(plaintext) 
